
const TMDB_API_KEY = "b6b677eb7d4ec17f700e3d4dfc31d005";
const corsProxy = "https://cors-anywhere.pulkitpareekofficial.workers.dev/?url=";

// Smooth scroll function
function scrollToTop() {
    let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
    if (scrollTop > 0) {
        window.requestAnimationFrame(scrollToTop);
        window.scrollTo(0, scrollTop - scrollTop / 8);
    }
}

// Player Configuration (using vidsrc.su as in original)
const PLAYER_CONFIG = {
    iframeId: "iframe",
    videoContainerId: "video",
    embedMovieUrl: (id) => `https://vidsrc.su/embed/movie/${id}`,
    embedTvUrl: (id, season, episode) => `https://vidsrc.su/embed/tv/${id}/${season}/${episode}`
};

// âœ… TRENDING MOVIES FOR HOMEPAGE
async function loadTrendingMovies() {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/trending/movie/week?api_key=${TMDB_API_KEY}`);
        const data = await response.json();
        displayTrendingMovies(data.results.slice(0, 20));
    } catch (error) {
        console.error("Error loading trending movies:", error);
    }
}

function displayTrendingMovies(movies) {
    const resultsContainer = document.getElementById("results");
    resultsContainer.innerHTML = '<h2 style="text-align:center; color:white; margin:20px 0;">ðŸ”¥ Trending Movies This Week</h2>';
    
    const trendingGrid = document.createElement('div');
    trendingGrid.style.cssText = `
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
        gap: 20px;
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    `;
    
    movies.forEach(movie => {
        const movieCard = document.createElement('div');
        movieCard.style.cssText = `
            background: #1a1a1a;
            border-radius: 10px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s ease;
            border: 2px solid transparent;
        `;
        
        movieCard.onmouseover = () => movieCard.style.transform = 'scale(1.05)';
        movieCard.onmouseout = () => movieCard.style.transform = 'scale(1)';
        
        const posterUrl = movie.poster_path 
            ? `https://image.tmdb.org/t/p/w300${movie.poster_path}`
            : 'https://via.placeholder.com/300x450?text=No+Image';
            
        movieCard.innerHTML = `
            <img src="${posterUrl}" alt="${movie.title}" style="width:100%; height:240px; object-fit:cover;">
            <div style="padding:10px;">
                <h4 style="color:white; font-size:14px; margin:0; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;">${movie.title}</h4>
                <p style="color:#888; font-size:12px; margin:5px 0 0 0;">${movie.release_date ? movie.release_date.split('-')[0] : 'N/A'}</p>
            </div>
        `;
        
        movieCard.addEventListener('click', () => {
            fetchImdbFromTmdb(movie.id, 'movie').then(imdbId => {
                if (imdbId) {
                    playMovie(imdbId, movie.title);
                }
            });
        });
        
        trendingGrid.appendChild(movieCard);
    });
    
    resultsContainer.appendChild(trendingGrid);
}

// âœ… SEARCH FUNCTIONALITY
function optimisedImageUrl(url) {
    return url.replace("._V1_.", "._V1_QL75_UX160_.");
}

function fetchAndShow() {
    const query = encodeURIComponent(document.getElementById("search-input").value);
    const url = `${corsProxy}https://v3.sg.media-imdb.com/suggestion/x/${query}.json`;
    
    if (typeof Pace !== 'undefined') Pace.restart();
    
    fetch(url)
        .then(response => response.json())
        .then(data => {
            const results = data.d;
            const resultsContainer = document.getElementById("results");
            resultsContainer.innerHTML = '<h2 style="text-align:center; color:white; margin:20px 0;">ðŸŽ¬ Search Results</h2>';
            
            const searchGrid = document.createElement('div');
            searchGrid.style.cssText = `
                display: grid;
                grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
                gap: 20px;
                padding: 20px;
                max-width: 1200px;
                margin: 0 auto;
            `;
            
            results.forEach(item => {
                if (item.i && (item.qid === "movie" || item.qid === "tvSeries")) {
                    const resultCard = document.createElement('div');
                    resultCard.classList.add('result');
                    resultCard.setAttribute('IMDB', item.id);
                    resultCard.style.cssText = `
                        background: #1a1a1a;
                        border-radius: 10px;
                        overflow: hidden;
                        cursor: pointer;
                        transition: transform 0.3s ease;
                        border: 2px solid transparent;
                    `;
                    
                    resultCard.onmouseover = () => resultCard.style.transform = 'scale(1.05)';
                    resultCard.onmouseout = () => resultCard.style.transform = 'scale(1)';
                    
                    const posterUrl = item.i ? optimisedImageUrl(item.i.imageUrl) : 'https://via.placeholder.com/300x450?text=No+Image';
                    const year = item.y || 'N/A';
                    const type = item.qid === "movie" ? "Movie" : "TV Series";
                    
                    resultCard.innerHTML = `
                        <img src="${posterUrl}" alt="${item.l}" style="width:100%; height:240px; object-fit:cover;">
                        <div style="padding:10px;">
                            <h4 style="color:white; font-size:14px; margin:0; overflow:hidden; text-overflow:ellipsis; white-space:nowrap;">${item.l}</h4>
                            <p style="color:#888; font-size:12px; margin:5px 0 0 0;">${year} â€¢ ${type}</p>
                        </div>
                    `;
                    
                    resultCard.addEventListener('click', () => {
                        if (item.qid === "movie") {
                            playMovie(item.id, item.l);
                        } else {
                            playTVSeries(item.id, item.l);
                        }
                    });
                    
                    searchGrid.appendChild(resultCard);
                }
            });
            
            resultsContainer.appendChild(searchGrid);
        })
        .catch(error => console.error("Search error:", error));
}

// âœ… PLAY MOVIE FUNCTION
async function playMovie(imdbId, title) {
    const tmdbId = await fetchTmdbIdFromImdb(imdbId);
    if (!tmdbId) {
        alert("Could not find movie details");
        return;
    }
    
    const videoContainer = document.getElementById(PLAYER_CONFIG.videoContainerId);
    const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
    
    iframe.src = PLAYER_CONFIG.embedMovieUrl(tmdbId);
    videoContainer.style.display = "block";
    document.getElementById("now").innerText = `Now Playing: ${title}`;
    document.title = title;
    
    // Update URL
    const url = `imdb=${imdbId}&type=movie&title=${title.replace(/ /g, "_")}`;
    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
    
    scrollToTop();
}

// âœ… PLAY TV SERIES FUNCTION
async function playTVSeries(imdbId, title) {
    const tmdbId = await fetchTmdbTvIdFromImdb(imdbId);
    if (!tmdbId) {
        alert("Could not find TV series details");
        return;
    }
    
    // Default to Season 1 Episode 1
    const season = 1;
    const episode = 1;
    
    const videoContainer = document.getElementById(PLAYER_CONFIG.videoContainerId);
    const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
    
    iframe.src = PLAYER_CONFIG.embedTvUrl(tmdbId, season, episode);
    videoContainer.style.display = "block";
    document.getElementById("now").innerText = `Now Playing: ${title} S${season}E${episode}`;
    document.title = `${title} S${season}E${episode}`;
    
    // Update URL
    const url = `imdb=${imdbId}&season=${season}&episode=${episode}&title=${title.replace(/ /g, "_")}&type=tvSeries`;
    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
    
    scrollToTop();
    loadTVSeriesData(tmdbId, imdbId, title);
}

// âœ… LOAD TV SERIES EPISODES
async function loadTVSeriesData(tmdbId, imdbId, title) {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/tv/${tmdbId}?api_key=${TMDB_API_KEY}`);
        const data = await response.json();
        const seasons = data.number_of_seasons;
        
        const webSeriesData = document.getElementById("webSeriesData");
        webSeriesData.innerHTML = '<h3>Episodes:</h3>';
        
        for (let seasonNum = 1; seasonNum <= Math.min(seasons, 5); seasonNum++) {
            const seasonResponse = await fetch(`https://api.themoviedb.org/3/tv/${tmdbId}/season/${seasonNum}?api_key=${TMDB_API_KEY}`);
            const seasonData = await seasonResponse.json();
            
            const seasonDiv = document.createElement('div');
            seasonDiv.innerHTML = `<h4>Season ${seasonNum}</h4>`;
            
            const episodeContainer = document.createElement('div');
            episodeContainer.style.cssText = 'display: flex; flex-wrap: wrap; gap: 10px; margin: 10px 0;';
            
            seasonData.episodes.forEach(ep => {
                const episodeBtn = document.createElement('button');
                episodeBtn.style.cssText = `
                    background: #333;
                    color: white;
                    border: none;
                    padding: 8px 12px;
                    border-radius: 5px;
                    cursor: pointer;
                    font-size: 12px;
                `;
                episodeBtn.innerText = `E${ep.episode_number.toString().padStart(2, '0')}`;
                episodeBtn.addEventListener('click', () => {
                    const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
                    iframe.src = PLAYER_CONFIG.embedTvUrl(tmdbId, seasonNum, ep.episode_number);
                    document.getElementById("now").innerText = `Now Playing: ${title} S${seasonNum}E${ep.episode_number}`;
                    
                    // Update URL
                    const url = `imdb=${imdbId}&season=${seasonNum}&episode=${ep.episode_number}&title=${title.replace(/ /g, "_")}&type=tvSeries`;
                    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
                });
                episodeContainer.appendChild(episodeBtn);
            });
            
            seasonDiv.appendChild(episodeContainer);
            webSeriesData.appendChild(seasonDiv);
        }
    } catch (error) {
        console.error("Error loading TV series data:", error);
    }
}

// âœ… TMDB API FUNCTIONS
async function fetchTmdbIdFromImdb(imdbId) {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
        const data = await response.json();
        return data.movie_results && data.movie_results[0] ? data.movie_results[0].id : null;
    } catch (error) {
        console.error("Failed to fetch TMDB ID:", error);
        return null;
    }
}

async function fetchTmdbTvIdFromImdb(imdbId) {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
        const data = await response.json();
        return data.tv_results && data.tv_results[0] ? data.tv_results[0].id : null;
    } catch (error) {
        console.error("Failed to fetch TMDB ID for TV show:", error);
        return null;
    }
}

async function fetchImdbFromTmdb(tmdbId, mediaType) {
    try {
        const endpoint = mediaType === 'movie' ? 
            `https://api.themoviedb.org/3/movie/${tmdbId}/external_ids` : 
            `https://api.themoviedb.org/3/tv/${tmdbId}/external_ids`;
        
        const response = await fetch(`${endpoint}?api_key=${TMDB_API_KEY}`);
        const data = await response.json();
        return data.imdb_id || null;
    } catch (error) {
        console.error("IMDB ID fetch error:", error);
        return null;
    }
}

// âœ… SEARCH EVENT LISTENERS
document.getElementById("search-button").addEventListener("click", fetchAndShow);
document.getElementById("search-input").addEventListener("keypress", function(event) {
    if (event.key === "Enter") {
        fetchAndShow();
    }
});

// âœ… INITIALIZE ON PAGE LOAD
document.addEventListener('DOMContentLoaded', function() {
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('search');
    
    if (searchQuery) {
        document.getElementById('search-input').value = searchQuery.replace(/\+/g, ' ');
        fetchAndShow();
    } else {
        // Load trending movies on homepage
        loadTrendingMovies();
    }
});

// âœ… HANDLE BROWSER BACK/FORWARD
window.onpopstate = function() {
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('search');
    const imdb = urlParams.get('imdb');
    
    if (searchQuery) {
        document.getElementById('search-input').value = searchQuery.replace(/\+/g, ' ');
        fetchAndShow();
    } else if (!imdb) {
        loadTrendingMovies();
    }
};

console.log("ðŸŽ¬ MovieFix loaded successfully!");

const TMDB_API_KEY = "b6b677eb7d4ec17f700e3d4dfc31d005";
const corsProxy = "https://cors-anywhere.pulkitpareekofficial.workers.dev/?url=";

// Debounce function for real-time search
function debounce(func, wait) {
    let timeout;
    return function executedFunction(...args) {
        const later = () => {
            clearTimeout(timeout);
            func(...args);
        };
        clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}

// Smooth scroll function (from original)
function scrollToTop() {
    let scrollTop = document.documentElement.scrollTop || document.body.scrollTop;
    if (scrollTop > 0) {
        window.requestAnimationFrame(scrollToTop);
        window.scrollTo(0, scrollTop - scrollTop / 8);
    }
}

// Player Configuration
const PLAYER_CONFIG = {
    iframeId: "iframe",
    videoContainerId: "video",
    embedMovieUrl: (id) => `https://zxczxc-pi.vercel.app/player/movie/${id}`,
    embedTvUrl: (id, season, episode) => `https://zxczxc-pi.vercel.app/player/tv/${id}/${season}/${episode}`
};

// âœ… TRENDING MOVIES FOR HOMEPAGE (using original CSS styling)
async function loadTrendingMovies() {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/trending/movie/week?api_key=${TMDB_API_KEY}`);
        const data = await response.json();
        displayTrendingMovies(data.results.slice(0, 20));
    } catch (error) {
        console.error("Error loading trending movies:", error);
    }
}

function displayTrendingMovies(movies) {
    const resultsContainer = document.getElementById("results");
    resultsContainer.innerHTML = '';
    
    movies.forEach(movie => {
        const resultDiv = document.createElement('div');
        resultDiv.classList.add('result'); // Using original CSS class
        resultDiv.setAttribute('IMDB', 'trending-' + movie.id);
        
        const posterUrl = movie.poster_path 
            ? `https://image.tmdb.org/t/p/w500${movie.poster_path}`
            : 'https://via.placeholder.com/500x750?text=No+Image';
        
        const year = movie.release_date ? movie.release_date.split('-')[0] : 'N/A';
        
        resultDiv.innerHTML = `
            <img src="${posterUrl}" alt="${movie.title}">
            <div class="info">
                <h3>${movie.title}</h3>
                <p>${year} â€¢ Movie</p>
            </div>
        `;
        
        resultDiv.addEventListener('click', () => {
            fetchImdbFromTmdb(movie.id, 'movie').then(imdbId => {
                if (imdbId) {
                    playMovie(imdbId, movie.title);
                }
            });
        });
        
        resultsContainer.appendChild(resultDiv);
    });
}

// âœ… REAL-TIME SEARCH FUNCTIONALITY (using original CSS styling)
function optimisedImageUrl(url) {
    return url.replace("._V1_.", "._V1_QL75_UX160_.");
}

async function performSearch(query) {
    if (!query.trim()) {
        loadTrendingMovies(); // Show trending when search is empty
        return;
    }
    
    const url = `${corsProxy}https://v3.sg.media-imdb.com/suggestion/x/${encodeURIComponent(query)}.json`;
    
    try {
        const response = await fetch(url);
        const data = await response.json();
        const results = data.d || [];
        
        const resultsContainer = document.getElementById("results");
        resultsContainer.innerHTML = '';
        
        results.forEach(item => {
            if (item.i && (item.qid === "movie" || item.qid === "tvSeries")) {
                const resultDiv = document.createElement('div');
                resultDiv.classList.add('result'); // Using original CSS class
                resultDiv.setAttribute('IMDB', item.id);
                
                const posterUrl = item.i ? optimisedImageUrl(item.i.imageUrl) : 'https://via.placeholder.com/500x750?text=No+Image';
                const year = item.y || 'N/A';
                const type = item.qid === "movie" ? "Movie" : "TV Series";
                
                resultDiv.innerHTML = `
                    <img src="${posterUrl}" alt="${item.l}">
                    <div class="info">
                        <h3>${item.l}</h3>
                        <p>${year} â€¢ ${type}</p>
                    </div>
                `;
                
                resultDiv.addEventListener('click', () => {
                    // Add selected styling
                    document.querySelectorAll('.result').forEach(el => el.classList.remove('hoverClass'));
                    resultDiv.classList.add('hoverClass');
                    
                    if (item.qid === "movie") {
                        playMovie(item.id, item.l);
                    } else {
                        playTVSeries(item.id, item.l);
                    }
                });
                
                resultsContainer.appendChild(resultDiv);
            }
        });
        
        // Update URL for search
        updateURL(query);
        
    } catch (error) {
        console.error("Search error:", error);
    }
}

// âœ… URL Management (from original)
function updateURL(searchTerm) {
    if (searchTerm) {
        window.history.replaceState({}, "", `?search=${encodeURIComponent(searchTerm).replace(/%20/g, "+")}`);
    } else {
        window.history.replaceState({}, "", window.location.pathname);
    }
}

function setUrl(element) {
    let url = element.getAttribute("url");
    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
}

// âœ… PLAY MOVIE FUNCTION
async function playMovie(imdbId, title) {
    const tmdbId = await fetchTmdbIdFromImdb(imdbId);
    if (!tmdbId) {
        alert("Could not find movie details");
        return;
    }
    
    const videoContainer = document.getElementById(PLAYER_CONFIG.videoContainerId);
    const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
    const nowPlaying = document.getElementById("now");
    
    iframe.src = PLAYER_CONFIG.embedMovieUrl(tmdbId);
    videoContainer.style.display = "block";
    if (nowPlaying) nowPlaying.innerText = `Now Playing: ${title}`;
    document.title = title;
    
    // Clear web series data
    const webSeriesData = document.getElementById("webSeriesData");
    if (webSeriesData) webSeriesData.innerHTML = "";
    
    // Update URL
    const url = `imdb=${imdbId}&type=movie&title=${title.replace(/ /g, "_")}`;
    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
    
    if (typeof Pace !== 'undefined') Pace.restart();
    scrollToTop();
}

// âœ… PLAY TV SERIES FUNCTION
async function playTVSeries(imdbId, title) {
    const tmdbId = await fetchTmdbTvIdFromImdb(imdbId);
    if (!tmdbId) {
        alert("Could not find TV series details");
        return;
    }
    
    // Default to Season 1 Episode 1
    const season = 1;
    const episode = 1;
    
    const videoContainer = document.getElementById(PLAYER_CONFIG.videoContainerId);
    const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
    const nowPlaying = document.getElementById("now");
    
    iframe.src = PLAYER_CONFIG.embedTvUrl(tmdbId, season, episode);
    videoContainer.style.display = "block";
    if (nowPlaying) nowPlaying.innerText = `Now Playing: ${title} S${season}E${episode}`;
    document.title = `${title} S${season}E${episode}`;
    
    // Update URL
    const url = `imdb=${imdbId}&season=${season}&episode=${episode}&title=${title.replace(/ /g, "_")}&type=tvSeries`;
    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
    
    if (typeof Pace !== 'undefined') Pace.restart();
    scrollToTop();
    loadTVSeriesData(tmdbId, imdbId, title);
}

// âœ… LOAD TV SERIES WITH SEASON POSTERS
async function loadTVSeriesData(tmdbId, imdbId, title) {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/tv/${tmdbId}?api_key=${TMDB_API_KEY}`);
        const data = await response.json();
        const seasons = data.number_of_seasons;
        
        const webSeriesData = document.getElementById("webSeriesData");
        webSeriesData.innerHTML = '<h2>Seasons:</h2>';
        
        for (let seasonNum = 1; seasonNum <= Math.min(seasons, 10); seasonNum++) {
            // Fetch season details including poster
            const seasonResponse = await fetch(`https://api.themoviedb.org/3/tv/${tmdbId}/season/${seasonNum}?api_key=${TMDB_API_KEY}`);
            const seasonData = await seasonResponse.json();
            
            // Create season container with poster
            const seasonDiv = document.createElement('div');
            seasonDiv.classList.add('season');
            seasonDiv.setAttribute('data-season', seasonNum);
            
            // Season poster URL
            const seasonPosterUrl = seasonData.poster_path 
                ? `https://image.tmdb.org/t/p/w300${seasonData.poster_path}`
                : data.poster_path 
                    ? `https://image.tmdb.org/t/p/w300${data.poster_path}` 
                    : 'https://via.placeholder.com/300x450?text=Season+' + seasonNum;
            
            // Season overview (truncated)
            const seasonOverview = seasonData.overview 
                ? seasonData.overview.substring(0, 200) + (seasonData.overview.length > 200 ? '...' : '')
                : `Season ${seasonNum} of ${title}`;
            
            // Air date
            const airDate = seasonData.air_date ? new Date(seasonData.air_date).getFullYear() : 'N/A';
            
            seasonDiv.innerHTML = `
                <img src="${seasonPosterUrl}" alt="Season ${seasonNum}" style="width: 200px; height: 300px; object-fit: cover;">
                <h3>Season ${seasonNum}</h3>
                <h4>${airDate} â€¢ ${seasonData.episodes ? seasonData.episodes.length : 0} Episodes</h4>
                <p>${seasonOverview}</p>
            `;
            
            // Create episode container (initially hidden)
            const episodeContainer = document.createElement('div');
            episodeContainer.classList.add('episode-container');
            episodeContainer.id = `episodes-season-${seasonNum}`;
            
            let episodeLinks = '';
            if (seasonData.episodes) {
                seasonData.episodes.forEach(ep => {
                    const episodeNumber = ep.episode_number.toString().padStart(2, '0');
                    const episodeName = ep.name || `Episode ${ep.episode_number}`;
                    episodeLinks += `<a href="#" class="episodes" cssIdentification="s${seasonNum}e${ep.episode_number}" onclick="playEpisode(${tmdbId}, '${imdbId}', '${title}', ${seasonNum}, ${ep.episode_number}); return false;">E${episodeNumber}. ${episodeName}</a>`;
                });
            }
            
            episodeContainer.innerHTML = episodeLinks;
            
            // Add click handler to season div to toggle episodes
            seasonDiv.addEventListener('click', () => {
                toggleEpisodes(seasonNum);
                // Play first episode of clicked season
                playEpisode(tmdbId, imdbId, title, seasonNum, 1);
            });
            
            webSeriesData.appendChild(seasonDiv);
            webSeriesData.appendChild(episodeContainer);
        }
        
        // Show first season episodes by default
        toggleEpisodes(1);
        
    } catch (error) {
        console.error("Error loading TV series data:", error);
    }
}

// âœ… TOGGLE EPISODE VISIBILITY
function toggleEpisodes(seasonNum) {
    // Hide all episode containers
    document.querySelectorAll('.episode-container').forEach(container => {
        container.classList.remove('visible');
    });
    
    // Show selected season episodes
    const selectedContainer = document.getElementById(`episodes-season-${seasonNum}`);
    if (selectedContainer) {
        selectedContainer.classList.add('visible');
    }
    
    // Update season highlighting
    document.querySelectorAll('.season').forEach(season => {
        season.classList.remove('active-season');
    });
    document.querySelector(`[data-season="${seasonNum}"]`).classList.add('active-season');
}

// âœ… PLAY SPECIFIC EPISODE
window.playEpisode = function(tmdbId, imdbId, title, season, episode) {
    const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
    const nowPlaying = document.getElementById("now");
    
    iframe.src = PLAYER_CONFIG.embedTvUrl(tmdbId, season, episode);
    if (nowPlaying) nowPlaying.innerText = `Now Playing: ${title} S${season}E${episode}`;
    document.title = `${title} S${season}E${episode}`;
    
    // Update URL
    const url = `imdb=${imdbId}&season=${season}&episode=${episode}&title=${title.replace(/ /g, "_")}&type=tvSeries`;
    window.history.replaceState({}, "", `?${url.replace(/%20/g, "+")}`);
    
    // Highlight selected episode
    document.querySelectorAll('.episodes').forEach(el => el.classList.remove('selected'));
    const selectedEpisode = document.querySelector(`[cssIdentification="s${season}e${episode}"]`);
    if (selectedEpisode) {
        selectedEpisode.classList.add('selected');
    }
    
    // Ensure correct season episodes are visible
    toggleEpisodes(season);
    
    scrollToTop();
};

// âœ… TMDB API FUNCTIONS
async function fetchTmdbIdFromImdb(imdbId) {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
        const data = await response.json();
        return data.movie_results && data.movie_results[0] ? data.movie_results[0].id : null;
    } catch (error) {
        console.error("Failed to fetch TMDB ID:", error);
        return null;
    }
}

async function fetchTmdbTvIdFromImdb(imdbId) {
    try {
        const response = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
        const data = await response.json();
        return data.tv_results && data.tv_results[0] ? data.tv_results[0].id : null;
    } catch (error) {
        console.error("Failed to fetch TMDB ID for TV show:", error);
        return null;
    }
}

async function fetchImdbFromTmdb(tmdbId, mediaType) {
    try {
        const endpoint = mediaType === 'movie' ? 
            `https://api.themoviedb.org/3/movie/${tmdbId}/external_ids` : 
            `https://api.themoviedb.org/3/tv/${tmdbId}/external_ids`;
        
        const response = await fetch(`${endpoint}?api_key=${TMDB_API_KEY}`);
        const data = await response.json();
        return data.imdb_id || null;
    } catch (error) {
        console.error("IMDB ID fetch error:", error);
        return null;
    }
}

// âœ… HANDLE URL PARAMETERS (from original)
function fillSearchInput() {
    const urlParams = new URLSearchParams(window.location.search);
    const searchTerm = urlParams.get("search");
    const season = urlParams.get("season");
    const episode = urlParams.get("episode");
    const imdb = urlParams.get("imdb");
    const type = urlParams.get("type");
    
    if (searchTerm && !season && !episode && !imdb) {
        // Search query
        const searchInput = document.getElementById("search-input");
        searchInput.value = searchTerm.replace(/\+/g, " ");
        performSearch(searchTerm.replace(/\+/g, " "));
    } else if (imdb && type && !searchTerm) {
        // Direct play
        fetchTitle(imdb).then(title => {
            if (type === "movie") {
                playMovie(imdb, title);
            } else if (type === "tvSeries" && season && episode) {
                // Handle specific episode
                playTVSeries(imdb, title);
            }
        }).catch(console.error);
    } else {
        // Default: show trending
        loadTrendingMovies();
    }
}

// Fetch title from IMDB (from original)
const fetchTitle = async (imdbId) => {
    let url = `${corsProxy}https://v3.sg.media-imdb.com/suggestion/x/${imdbId}.json`;
    try {
        let response = await fetch(url);
        let data = await response.json();
        let title = data.d[0].l;
        return title;
    } catch (error) {
        console.error(error);
    }
};

// âœ… REAL-TIME SEARCH EVENT LISTENERS
document.addEventListener('DOMContentLoaded', function() {
    const searchInput = document.getElementById("search-input");
    const searchButton = document.getElementById("search-button");
    
    if (searchInput) {
        // Create debounced search function (500ms delay)
        const debouncedSearch = debounce((query) => {
            performSearch(query);
        }, 500);
        
        // Real-time search on input
        searchInput.addEventListener('input', (e) => {
            debouncedSearch(e.target.value.trim());
        });
        
        // Search on Enter key
        searchInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                performSearch(e.target.value.trim());
            }
        });
    }
    
    // Keep button functionality for compatibility
    if (searchButton) {
        searchButton.addEventListener('click', () => {
            if (searchInput) {
                performSearch(searchInput.value.trim());
            }
        });
    }
    
    // Initialize page
    fillSearchInput();
});

// âœ… HANDLE BROWSER BACK/FORWARD
window.onpopstate = function() {
    fillSearchInput();
};

console.log("ðŸŽ¬ MovieFix with season posters loaded successfully!");
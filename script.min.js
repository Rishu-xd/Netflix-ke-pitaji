// Enhanced Netflix Ke Pitaji with Server Switching
const SERVERS = {
  'vidstream': { name: 'VidStream', baseUrl: 'https://vidstream.to/embed/', status: 'active', description: 'High quality streaming' },
  'mycloud':   { name: 'MyCloud',   baseUrl: 'https://mcloud.to/embed/',   status: 'active', description: 'Fast loading' },
  'streamtape':{ name: 'StreamTape',baseUrl: 'https://streamtape.com/e/',  status: 'active', description: 'Reliable streaming' },
  'mp4upload': { name: 'Mp4Upload', baseUrl: 'https://www.mp4upload.com/embed-', status: 'active', description: 'Direct streaming' },
  'doodstream':{ name: 'DoodStream',baseUrl: 'https://dood.so/e/',         status: 'active', description: 'Alternative server' },
  'hydrax':    { name: 'Hydrax',    baseUrl: 'https://replay.watch/embed/',status: 'active', description: 'HD streaming' },
  'filemoon':  { name: 'FileMoon',  baseUrl: 'https://filemoon.sx/e/',     status: 'active', description: 'Backup server' },
  'vidsrc':    { name: 'VidSrc',    baseUrl: 'https://vidsrc.me/embed/movie/', status: 'active', description: 'Multi-source' }
};

let currentMovie = null;
let currentSeason = null;
let currentEpisode = null;
let activeServer = 'vidsrc';

$(document).ready(function() {
  initializeServerButtons();
  bindSearchEvents();
  handleUrlParameters();
});

function initializeServerButtons() {
  const serverButtonsContainer = $('#server-buttons');
  Object.keys(SERVERS).forEach(serverId => {
    const server = SERVERS[serverId];
    const button = $(`
      <button class="server-btn" data-server="${serverId}" title="${server.description}">
        <span>${server.name}</span>
        <div class="server-status">${server.status}</div>
      </button>
    `);
    button.click(() => switchServer(serverId));
    serverButtonsContainer.append(button);
  });
  $(`.server-btn[data-server="${activeServer}"]`).addClass('active');
}

function switchServer(serverId) {
  if (!currentMovie) { showNotification('Please select a movie first!', 'warning'); return; }
  activeServer = serverId;
  $('.server-btn').removeClass('active');
  $(`.server-btn[data-server="${serverId}"]`).addClass('active');
  showLoading(true);
  const server = SERVERS[serverId];
  $('#server-info').html(`
    <strong>${server.name}</strong> - ${server.description}<br>
    <small>Status: ${server.status}</small>
  `);
  if (currentSeason && currentEpisode) {
    loadTVShow(currentMovie.id, currentSeason, currentEpisode);
  } else {
    loadMovie(currentMovie.id);
  }
}

function loadMovie(movieId) {
  currentMovie = { id: movieId, type: 'movie' };
  const server = SERVERS[activeServer];
  let embedUrl;
  switch(activeServer) {
    case 'vidsrc':
      embedUrl = `${server.baseUrl}${movieId}`;
      break;
    case 'vidstream':
    case 'mycloud':
      embedUrl = `${server.baseUrl}${movieId}`;
      break;
    case '2embed':
      embedUrl = `https://www.2embed.cc/embed/${movieId}`;
      break;
    default:
      embedUrl = `${server.baseUrl}${movieId}`;
  }
  updateIframe(embedUrl);
  showServerContainer();
}

function loadTVShow(showId, season, episode) {
  currentMovie = { id: showId, type: 'tv' };
  currentSeason = season;
  currentEpisode = episode;
  const server = SERVERS[activeServer];
  let embedUrl;
  switch(activeServer) {
    case 'vidsrc':
      embedUrl = `https://vidsrc.me/embed/tv/${showId}/${season}/${episode}`;
      break;
    case 'vidstream':
    case 'mycloud':
      embedUrl = `${server.baseUrl}${showId}/${season}/${episode}`;
      break;
    case '2embed':
      embedUrl = `https://www.2embed.cc/embedtv/${showId}&s=${season}&e=${episode}`;
      break;
    default:
      embedUrl = `${server.baseUrl}${showId}-${season}-${episode}`;
  }
  updateIframe(embedUrl);
  showServerContainer();
}

function updateIframe(url) {
  const iframe = $('#iframe');
  iframe.off('load error');
  iframe.on('load', function() { showLoading(false); showNotification(`Loaded with ${SERVERS[activeServer].name}`, 'success'); });
  iframe.on('error', function() { showLoading(false); showNotification(`Failed to load with ${SERVERS[activeServer].name}. Try another server.`, 'error'); });
  iframe.attr('src', url);
}

function showServerContainer() { $('#server-container').addClass('active'); }
function showLoading(show) { show ? $('#loading-indicator').show() : $('#loading-indicator').hide(); }

function showNotification(message, type = 'info') {
  if ($('#notification').length === 0) {
    $('body').append('<div id="notification" style="position: fixed; top: 20px; right: 20px; z-index: 9999; padding: 10px 20px; border-radius: 5px; color: white; font-weight: bold;"></div>');
  }
  const notification = $('#notification');
  const colors = { success: '#4CAF50', error: '#f44336', warning: '#ff9800', info: '#2196F3' };
  notification.css('background', colors[type] || colors.info).text(message).fadeIn();
  setTimeout(() => { notification.fadeOut(); }, 3000);
}

function bindSearchEvents() {
  $('#search-button').click(performSearch);
  $('#search-input').keypress(function(e) { if (e.which === 13) performSearch(); });
}

function performSearch() {
  const query = $('#search-input').val().trim();
  if (!query) return;
  const apiKey = 'b6b677eb7d4ec17f700e3d4dfc31d005';
  const searchUrl = `https://api.themoviedb.org/3/search/multi?api_key=${apiKey}&query=${encodeURIComponent(query)}`;
  $.get(searchUrl).done(function(data) { displaySearchResults(data.results); })
                  .fail(function() { showNotification('Search failed. Please try again.', 'error'); });
}

function displaySearchResults(results) {
  const resultsContainer = $('#results'); resultsContainer.empty();
  results.forEach(item => {
    const poster = item.poster_path ? `https://image.tmdb.org/t/p/w500${item.poster_path}` : 'https://via.placeholder.com/300x450?text=No+Image';
    const title = item.title || item.name;
    const year = new Date(item.release_date || item.first_air_date).getFullYear();
    const type = item.media_type;
    const resultItem = $(`
      <div class="result-item" style="display: inline-block; margin: 10px; cursor: pointer;">
        <img src="${poster}" alt="${title}" style="width: 200px; height: 300px; border-radius: 10px;">
        <h3>${title} (${year || ''})</h3>
        <p>${type === 'movie' ? 'Movie' : 'TV Series'}</p>
      </div>
    `);
    resultItem.click(() => {
      if (type === 'movie') { loadMovie(item.id); } else { loadTVShow(item.id, 1, 1); }
      $('html, body').animate({ scrollTop: $('#video').offset().top - 100 }, 1000);
    });
    resultsContainer.append(resultItem);
  });
}

function handleUrlParameters() {
  const urlParams = new URLSearchParams(window.location.search);
  const movieId = urlParams.get('movie');
  const tvId = urlParams.get('tv');
  const season = urlParams.get('s');
  const episode = urlParams.get('e');
  if (movieId) { loadMovie(movieId); }
  else if (tvId && season && episode) { loadTVShow(tvId, season, episode); }
}

$('#iframe').on('load', function() {
  try {
    const iframe = this;
    if (iframe.contentWindow.location.href === 'about:blank') {
      showNotification('Server may be blocked. Try another server.', 'warning');
    }
  } catch (e) { /* cross-origin is expected */ }
});

$(document).keydown(function(e) {
  if (e.ctrlKey) {
    const serverKeys = Object.keys(SERVERS);
    const key = e.which - 49; // 1..8
    if (key >= 0 && key < serverKeys.length) {
      e.preventDefault();
      switchServer(serverKeys[key]);
      showNotification(`Switched to ${SERVERS[serverKeys[key]].name}`, 'info');
    }
  }
});

const additionalCSS = `
  .result-item { transition: transform 0.3s ease; }
  .result-item:hover { transform: scale(1.05); }
  #notification { animation: slideInRight 0.3s ease; }
  @keyframes slideInRight { from { transform: translateX(100%);} to { transform: translateX(0);} }
  .video { max-width: 100%; }
  #iframe { width: 100%; height: 500px; border-radius: 10px; margin-top: 10px; }
  @media (max-width: 768px) { #iframe { height: 300px; } .result-item img { width: 150px; height: 225px; } }
`;
$('<style>').text(additionalCSS).appendTo('head');

console.log('Enhanced Netflix Ke Pitaji with Server Switching Loaded!');
console.log('Available servers:', Object.keys(SERVERS).map(k => SERVERS[k].name));
console.log('Use Ctrl + 1-8 to quickly switch between servers');
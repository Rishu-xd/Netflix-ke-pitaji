let selectedPlayer = "2embed";

// Handle player switch
document.getElementById("player-selector").addEventListener("change", async (e) => {
  selectedPlayer = e.target.value;
  const params = new URLSearchParams(window.location.search);
  const imdb = params.get("imdb");
  const season = params.get("season");
  const episode = params.get("episode");
  const title = params.get("title");
  const type = params.get("type");
  if (imdb && title) {
    await setAll(imdb, title.replace(/_/g, " "), season, episode, type);
  }
});

// Update URL in address bar
function setUrl(el) {
  let t = el.getAttribute("url");
  window.history.replaceState({}, "", `?${t.replace(/%20/g, "+")}`);
}

// Configurable embed URLs
const PLAYER_CONFIG = {
  iframeId: "iframe",
  videoContainerId: "video",
  embedMovieUrl: (id) => {
    switch (selectedPlayer) {
      case "vidsrc": return `https://vidsrc.to/embed/movie/${id}`;
      case "indraembed": return `https://indraembed.netlify.app/movie/${id}`;
      case "2embed":
      default: return `https://www.2embed.cc/embed/${id}`;
    }
  },
  embedTvUrl: (id, season, episode) => {
    switch (selectedPlayer) {
      case "vidsrc": return `https://vidsrc.to/embed/tv/${id}/${season}/${episode}`;
      case "indraembed": return `https://indraembed.netlify.app/tv/${id}/${season}/${episode}`;
      case "2embed":
      default: return `https://www.2embed.cc/embedtv/${id}&s=${season}&e=${episode}`;
    }
  },
};

async function setAll(imdbId, title, season, episode, type) {
  let tmdbId = null;
  if (type === "movie") {
    tmdbId = await fetchTmdbIdFromImdb(imdbId);
    if (!tmdbId) return alert("Movie not found");
    const videoLink = document.createElement("a");
    videoLink.setAttribute("url", `imdb=${imdbId}&type=movie&title=${title.replace(/ /g, "_")}`);
    videoLink.setAttribute("isWebSeries", "false");
    videoLink.setAttribute("title", title);
    videoLink.setAttribute("class", "links");
    videoLink.setAttribute("IMDB", imdbId);
    videoLink.setAttribute("href", PLAYER_CONFIG.embedMovieUrl(tmdbId));
    videoLink.setAttribute("target", "_self");
    setUrl(videoLink);
    setVideo(videoLink);
  } else if (type === "tvSeries") {
    tmdbId = await fetchTmdbTvIdFromImdb(imdbId);
    if (!tmdbId) return alert("TV Show not found");
    if (!(season && episode)) return alert("Season and episode required");
    const tvLink = document.createElement("a");
    tvLink.setAttribute("url", `imdb=${imdbId}&season=${season}&episode=${episode}&title=${title.replace(/ /g, "_")}&type=tvSeries`);
    tvLink.setAttribute("isWebSeries", "true");
    tvLink.setAttribute("title", title);
    tvLink.setAttribute("class", "links");
    tvLink.setAttribute("IMDB", imdbId);
    tvLink.setAttribute("href", PLAYER_CONFIG.embedTvUrl(tmdbId, season, episode));
    tvLink.setAttribute("target", "_self");
    setUrl(tvLink);
    setVideo(tvLink);
  }
}

function setVideo(el) {
  const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
  const container = document.getElementById(PLAYER_CONFIG.videoContainerId);
  iframe.src = el.getAttribute("href");
  container.style.display = "block";
  document.getElementById("player-selector").style.display = "inline-block";
  scrollToTop();
  window.dispatchEvent(new PopStateEvent("popstate"));
  const title = el.getAttribute("title");
  if (title) {
    document.title = title;
    const nowPlaying = document.getElementById("now");
    if (nowPlaying) nowPlaying.innerText = `Now Playing: ${title}`;
  }
  return false;
}

// Smooth scroll to top function
function scrollToTop() {
  window.scrollTo({ top: 0, behavior: "smooth" });
}

// TMDB API Calls
const TMDB_API_KEY = "b6b677eb7d4ec17f700e3d4dfc31d005";

async function fetchTmdbIdFromImdb(imdbId) {
  const res = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
  const data = await res.json();
  return data.movie_results?.?.id || null;
}

async function fetchTmdbTvIdFromImdb(imdbId) {
  const res = await fetch(`https://api.themoviedb.org/3/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
  const data = await res.json();
  return data.tv_results?.?.id || null;
}

// ✅ Full Working Embed System with Search API and Trending API Support
let selectedPlayer = "2embed";
const TMDB_API_KEY = "b6b677eb7d4ec17f700e3d4dfc31d005";
const TMDB_BASE_URL = "https://api.themoviedb.org/3";

// ✅ TMDB API Endpoints
const API_ENDPOINTS = {
  search: {
    movie: `${TMDB_BASE_URL}/search/movie`,
    tv: `${TMDB_BASE_URL}/search/tv`,
    multi: `${TMDB_BASE_URL}/search/multi`
  },
  trending: {
    all: `${TMDB_BASE_URL}/trending/all/week`,
    movies: `${TMDB_BASE_URL}/trending/movie/week`,
    tv: `${TMDB_BASE_URL}/trending/tv/week`
  },
  popular: {
    movies: `${TMDB_BASE_URL}/movie/popular`,
    tv: `${TMDB_BASE_URL}/tv/popular`
  },
  discover: {
    movie: `${TMDB_BASE_URL}/discover/movie`,
    tv: `${TMDB_BASE_URL}/discover/tv`
  }
};

// ✅ Player Configuration
const PLAYER_CONFIG = {
  iframeId: "iframe",
  videoContainerId: "video",
  embedMovieUrl: (id) => {
    switch (selectedPlayer) {
      case "vidsrc": return `https://vidsrc.to/embed/movie/${id}`;
      case "indraembed": return `https://indraembed.netlify.app/movie/${id}`;
      case "2embed":
      default: return `https://www.2embed.cc/embed/${id}`;
    }
  },
  embedTvUrl: (id, season, episode) => {
    switch (selectedPlayer) {
      case "vidsrc": return `https://vidsrc.to/embed/tv/${id}/${season}/${episode}`;
      case "indraembed": return `https://indraembed.netlify.app/tv/${id}/${season}/${episode}`;
      case "2embed":
      default: return `https://www.2embed.cc/embedtv/${id}&s=${season}&e=${episode}`;
    }
  }
};

// ✅ Search Suggestions with Debouncing
const debounce = (func, delay) => {
  let timeout;
  return (...args) => {
    clearTimeout(timeout);
    timeout = setTimeout(() => func.apply(this, args), delay);
  };
};

// ✅ Search API Implementation
async function searchMoviesAndTV(query) {
  try {
    const response = await fetch(`${API_ENDPOINTS.search.multi}?api_key=${TMDB_API_KEY}&query=${encodeURIComponent(query)}&page=1&include_adult=false`);
    const data = await response.json();
    return data.results || [];
  } catch (error) {
    console.error("Search API Error:", error);
    return [];
  }
}

// ✅ Trending API Implementation
async function getTrendingContent(type = 'all', timeWindow = 'week') {
  try {
    const endpoint = type === 'all' ? API_ENDPOINTS.trending.all : 
                    type === 'movie' ? API_ENDPOINTS.trending.movies : 
                    API_ENDPOINTS.trending.tv;
    
    const response = await fetch(`${endpoint}?api_key=${TMDB_API_KEY}&page=1`);
    const data = await response.json();
    return data.results || [];
  } catch (error) {
    console.error("Trending API Error:", error);
    return [];
  }
}

// ✅ Popular Content API
async function getPopularContent(type = 'movie') {
  try {
    const endpoint = type === 'movie' ? API_ENDPOINTS.popular.movies : API_ENDPOINTS.popular.tv;
    const response = await fetch(`${endpoint}?api_key=${TMDB_API_KEY}&page=1`);
    const data = await response.json();
    return data.results || [];
  } catch (error) {
    console.error("Popular API Error:", error);
    return [];
  }
}

// ✅ Search Suggestions UI
function displaySearchSuggestions(results) {
  const suggestionsContainer = document.getElementById("search-suggestions");
  if (!suggestionsContainer) return;

  suggestionsContainer.innerHTML = '';
  
  if (results.length === 0) {
    suggestionsContainer.style.display = 'none';
    return;
  }

  results.slice(0, 8).forEach(item => {
    const suggestionItem = document.createElement('div');
    suggestionItem.className = 'suggestion-item';
    
    const title = item.title || item.name || 'Unknown';
    const year = item.release_date ? `(${item.release_date.split('-')})` : 
                 item.first_air_date ? `(${item.first_air_date.split('-')})` : '';
    const mediaType = item.media_type === 'movie' ? 'Movie' : 
                     item.media_type === 'tv' ? 'TV Series' : 'Unknown';
    
    suggestionItem.innerHTML = `
      <div class="suggestion-content">
        <div class="suggestion-title">${title} ${year}</div>
        <div class="suggestion-type">${mediaType}</div>
      </div>
    `;
    
    suggestionItem.addEventListener('click', () => {
      const type = item.media_type === 'movie' ? 'movie' : 'tvSeries';
      const season = type === 'tvSeries' ? '1' : null;
      const episode = type === 'tvSeries' ? '1' : null;
      
      // Get IMDB ID from TMDB ID
      fetchImdbFromTmdb(item.id, item.media_type).then(imdbId => {
        if (imdbId) {
          setAll(imdbId, title, season, episode, type);
          document.getElementById("search-input").value = title;
          suggestionsContainer.style.display = 'none';
        }
      });
    });
    
    suggestionsContainer.appendChild(suggestionItem);
  });
  
  suggestionsContainer.style.display = 'block';
}

// ✅ Trending Content UI
async function displayTrendingContent() {
  const trendingContainer = document.getElementById("trending-content");
  if (!trendingContainer) return;

  const trending = await getTrendingContent('all', 'week');
  
  trendingContainer.innerHTML = '<h3>Trending This Week</h3>';
  
  trending.slice(0, 12).forEach(item => {
    const trendingItem = document.createElement('div');
    trendingItem.className = 'trending-item';
    
    const title = item.title || item.name || 'Unknown';
    const posterUrl = item.poster_path ? 
      `https://image.tmdb.org/t/p/w200${item.poster_path}` : 
      'https://via.placeholder.com/200x300?text=No+Image';
    
    trendingItem.innerHTML = `
      <img src="${posterUrl}" alt="${title}" class="trending-poster">
      <div class="trending-title">${title}</div>
    `;
    
    trendingItem.addEventListener('click', () => {
      const type = item.media_type === 'movie' ? 'movie' : 'tvSeries';
      const season = type === 'tvSeries' ? '1' : null;
      const episode = type === 'tvSeries' ? '1' : null;
      
      fetchImdbFromTmdb(item.id, item.media_type).then(imdbId => {
        if (imdbId) {
          setAll(imdbId, title, season, episode, type);
        }
      });
    });
    
    trendingContainer.appendChild(trendingItem);
  });
}

// ✅ Convert TMDB ID to IMDB ID
async function fetchImdbFromTmdb(tmdbId, mediaType) {
  try {
    const endpoint = mediaType === 'movie' ? 
      `${TMDB_BASE_URL}/movie/${tmdbId}/external_ids` : 
      `${TMDB_BASE_URL}/tv/${tmdbId}/external_ids`;
    
    const response = await fetch(`${endpoint}?api_key=${TMDB_API_KEY}`);
    const data = await response.json();
    return data.imdb_id || null;
  } catch (error) {
    console.error("IMDB ID fetch error:", error);
    return null;
  }
}

// ✅ Initialize Search Input
function initializeSearch() {
  const searchInput = document.getElementById("search-input");
  if (!searchInput) return;

  const debouncedSearch = debounce(async (query) => {
    if (query.length >= 2) {
      const results = await searchMoviesAndTV(query);
      displaySearchSuggestions(results);
    } else {
      document.getElementById("search-suggestions").style.display = 'none';
    }
  }, 300);

  searchInput.addEventListener('input', (e) => {
    debouncedSearch(e.target.value.trim());
  });

  // Hide suggestions when clicking outside
  document.addEventListener('click', (e) => {
    if (!e.target.closest('.search-container')) {
      document.getElementById("search-suggestions").style.display = 'none';
    }
  });
}

// ✅ Player Switch Handler
document.getElementById("player-selector")?.addEventListener("change", async (e) => {
  selectedPlayer = e.target.value;
  const params = new URLSearchParams(window.location.search);
  const imdb = params.get("imdb");
  const season = params.get("season");
  const episode = params.get("episode");
  const title = params.get("title");
  const type = params.get("type");
  if (imdb && title) {
    await setAll(imdb, title.replace(/_/g, " "), season, episode, type);
  }
});

// ✅ Main Function (Updated)
async function setAll(imdbId, title, season, episode, type) {
  let tmdbId = null;
  if (type === "movie") {
    tmdbId = await fetchTmdbIdFromImdb(imdbId);
    if (!tmdbId) return alert("Movie not found");
    const videoLink = createVideoLink(imdbId, title, null, null, type, PLAYER_CONFIG.embedMovieUrl(tmdbId));
    setUrl(videoLink);
    setVideo(videoLink);
  } else if (type === "tvSeries") {
    tmdbId = await fetchTmdbTvIdFromImdb(imdbId);
    if (!tmdbId) return alert("TV Show not found");
    if (!(season && episode)) return alert("Season and episode required");
    const tvLink = createVideoLink(imdbId, title, season, episode, type, PLAYER_CONFIG.embedTvUrl(tmdbId, season, episode));
    setUrl(tvLink);
    setVideo(tvLink);
  }
}

// ✅ Helper Functions
function createVideoLink(imdb, title, season, episode, type, href) {
  const link = document.createElement("a");
  const urlParams = season && episode ? 
    `imdb=${imdb}&season=${season}&episode=${episode}&title=${title.replace(/ /g, "_")}&type=${type}` :
    `imdb=${imdb}&type=${type}&title=${title.replace(/ /g, "_")}`;
  
  link.setAttribute("url", urlParams);
  link.setAttribute("isWebSeries", type === "tvSeries" ? "true" : "false");
  link.setAttribute("title", title);
  link.setAttribute("class", "links");
  link.setAttribute("IMDB", imdb);
  link.setAttribute("href", href);
  link.setAttribute("target", "_self");
  return link;
}

function setUrl(el) {
  let t = el.getAttribute("url");
  window.history.replaceState({}, "", `?${t.replace(/%20/g, "+")}`);
}

function setVideo(el) {
  const iframe = document.getElementById(PLAYER_CONFIG.iframeId);
  const container = document.getElementById(PLAYER_CONFIG.videoContainerId);
  iframe.src = el.getAttribute("href");
  container.style.display = "block";
  document.getElementById("player-selector").style.display = "inline-block";
  scrollToTop();
  window.dispatchEvent(new PopStateEvent("popstate"));
  const title = el.getAttribute("title");
  if (title) {
    document.title = title;
    const nowPlaying = document.getElementById("now");
    if (nowPlaying) nowPlaying.innerText = `Now Playing: ${title}`;
  }
  return false;
}

function scrollToTop() {
  window.scrollTo({ top: 0, behavior: "smooth" });
}

// ✅ Original TMDB Fetch Functions
async function fetchTmdbIdFromImdb(imdbId) {
  const res = await fetch(`${TMDB_BASE_URL}/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
  const data = await res.json();
  return data.movie_results?.?.id || null;
}

async function fetchTmdbTvIdFromImdb(imdbId) {
  const res = await fetch(`${TMDB_BASE_URL}/find/${imdbId}?api_key=${TMDB_API_KEY}&external_source=imdb_id`);
  const data = await res.json();
  return data.tv_results?.?.id || null;
}

// ✅ Initialize Everything
document.addEventListener('DOMContentLoaded', () => {
  initializeSearch();
  displayTrendingContent();
});
